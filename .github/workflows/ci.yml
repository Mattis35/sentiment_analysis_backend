# ============================================
# 🚀 WORKFLOW DE TEST + BUILD + DEPLOIEMENT RENDER
# ============================================
name: Deploy API

on:
  push:
    branches: [ "main" ]          # A chaque push sur main
  pull_request:
    branches: [ "main" ]          # PR vers main (tests uniquement)

jobs:
  # ==========================================
  # JOB 1 : TESTS 🧪
  # ==========================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: ✅ Smoke import
        run: |
          python - << 'PY'
          from main import app
          print("✅ Import OK, FastAPI app loaded successfully.")
          PY

      # Lancement des vrais tests Pytest (test_api.py)
      - name: 🧪 Run pytest suite
        run: |
          pytest -v --maxfail=1 --disable-warnings -q

      # Mini smoke test inline (sécurité supplémentaire)
      - name: 🔎 Inline smoke endpoints
        run: |
          python - << 'PY'
          from fastapi.testclient import TestClient
          from main import app
          c = TestClient(app)

          # /health
          r = c.get("/health")
          assert r.status_code == 200, r.text
          j = r.json()
          assert "status" in j and j["status"] == "ok"
          print("✅ /health OK")

          # /predict
          r = c.post("/predict", json={"text": "I love this product!"})
          assert r.status_code == 200, r.text
          print("✅ /predict OK")

          # /explain
          r = c.post("/explain", json={"text": "This is terrible!"})
          assert r.status_code in (200, 503), r.text
          print("✅ /explain OK (status:", r.status_code, ")")
          PY

  # ==========================================
  # JOB 2 : BUILD 🏗️
  # ==========================================
  build:
    name: 🏗️ Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: 📦 Verify dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies OK"

      - name: 📋 Check files
        run: |
          ls -la
          test -f main.py
          test -f requirements.txt
          test -f sentiment_model.joblib || echo "⚠️ sentiment_model.joblib missing (ok if loaded via MLflow or cloud)"
          test -f tfidf_vectorizer.joblib || echo "ℹ️ tfidf_vectorizer.joblib optional"
          echo "✅ Files OK"

  # ==========================================
  # JOB 3 : DEPLOY 🚀
  # ==========================================
  deploy:
    name: 🚀 Deploy to Render
    needs: [ test, build ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🔐 Check deploy hook
        run: |
          if [ -z "${{ secrets.RENDER_DEPLOY_HOOK }}" ]; then
            echo "❌ Missing RENDER_DEPLOY_HOOK secret in GitHub settings."
            exit 1
          fi
          echo "✅ Deploy hook detected."

      - name: 🚀 Trigger Render deploy
        run: |
          curl -fsSL -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}" && echo "✅ Deploy triggered" || (echo "❌ Deploy failed" && exit 1)

      - name: ✅ Deployment step done
        run: |
          echo "🌐 Check Render dashboard for deployment progress."
